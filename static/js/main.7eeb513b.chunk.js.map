{"version":3,"sources":["logo.svg","components/Header/index.js","components/GridHeader/index.js","components/SearchBar/index.js","components/ListItem/index.js","components/ResultViewer/index.js","API/loadEmployees.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","GridHeader","useState","arrowState","setArrowState","style","display","flexDirection","justifyContent","alignItems","color","orange","fontSize","onClick","sortUsers","SearchBar","backgroundColor","width","height","textAlign","placeholder","onChange","e","findByUser","nativeEvent","target","value","ListItem","position","image","email","location","fullname","birthdate","src","alt","substr","ResultViewer","data","map","item","index","key","picture","thumbnail","state","name","first","last","dob","date","loadEmployees","a","fetch","method","response","json","resData","App","employees","setEmployees","allEmployees","setAllEmployees","matchUserByString","text","users","filter","length","toLowerCase","loadData","results","useEffect","isAsc","employeesToSort","sort","b","nameA","nameB","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7eeb513b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Header = props => {\r\n    return (\r\n        <div className=\"header d-flex w-100\">\r\n            <p className=\"title\">Employee Directory</p>\r\n            <p className=\"sub-text\">Click on carrots to filter by heading or use the search box to narrow your results.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useState, useEffect } from 'react';\r\nimport './style.css';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\r\nimport { orange } from '@material-ui/core/colors';\r\n\r\nconst GridHeader = props => {\r\n\r\n    const [arrowState, setArrowState] = useState(true) // will indicate pointed down\r\n\r\n    return (\r\n        <div className='section-container'>\r\n            <p className='section image'>Image</p>\r\n\r\n            <div className={'section name'} style={{display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center'}}>\r\n                <p className='section'>Name</p> \r\n                \r\n                { arrowState && \r\n                    <ArrowDropDownIcon \r\n                        style={{color: orange[500]}} \r\n                        fontSize={'small'}  \r\n                        onClick={() => { \r\n                            setArrowState(!arrowState)\r\n                            props.sortUsers(arrowState);\r\n                        }}\r\n                    /> \r\n                }\r\n\r\n                { !arrowState && \r\n                    <ArrowDropUpIcon \r\n                        style={{color: orange[500]}} \r\n                        fontSize={'small'} \r\n                        onClick={() => { \r\n                            setArrowState(!arrowState)\r\n                            props.sortUsers(arrowState);\r\n                        }} \r\n                    />\r\n                }\r\n            </div>\r\n\r\n            <p className='section place'>Place</p>\r\n            <p className='section email'>Email</p>\r\n            <p className='section dob'>DOB</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GridHeader;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst SearchBar = props => {\r\n\r\n    const handleInputChange = e => {\r\n        props.findByUser(e.nativeEvent.target.value)\r\n    }\r\n\r\n    return (\r\n        <div style={{ backgroundColor: 'whitesmoke', width: '100%', height: 80, alignItems: 'center', justifyContent: 'center', textAlign: 'center'}}>\r\n            <input \r\n                className='input' \r\n                placeholder={'Testing'}\r\n                onChange={handleInputChange}\r\n            ></input>            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst ListItem = props => {\r\n    const { position, image, email, location, fullname, birthdate } = props;\r\n\r\n    const style = {\r\n\r\n    }\r\n\r\n    if(position % 2 === 0) {\r\n        style.backgroundColor = 'lightgray'\r\n    } else {\r\n        style.backgroundColor = 'whitesmoke'\r\n    }\r\n\r\n    return (\r\n        <div className='list-container' style={style}>\r\n            <img className='item image' src={image} alt={'profile'} />\r\n            <p className='item name'>{fullname}</p> \r\n            <p className='item place'>{location}</p>\r\n            <p className='item email link'>{email}</p>\r\n            <p className='item dob'>{birthdate.substr(0, 10)}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport './style.css';\r\nimport GridHeader from '../GridHeader';\r\nimport SearchBar from '../SearchBar';\r\nimport ListItem from '../ListItem';\r\n\r\nconst ResultViewer = props => {\r\n\r\n    return (\r\n        <div className='container'>\r\n            <SearchBar \r\n                findByUser={props.findByUser} \r\n            />\r\n            <GridHeader \r\n                sortUsers={props.sortUsers}\r\n            />\r\n            { props.data.map((item, index) => {\r\n                return (\r\n                    <ListItem \r\n                        key={index}\r\n                        position={index}\r\n                        image={item.picture.thumbnail}\r\n                        email={item.email}\r\n                        location={item.location.state}\r\n                        fullname={`${item.name.first} ${item.name.last}`}\r\n                        birthdate={item.dob.date}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultViewer;","\r\nconst loadEmployees = async () => {\r\n    const response = await fetch(\r\n        'https://randomuser.me/api/?nat=us&results=200',\r\n        {\r\n            method: 'GET'\r\n        }\r\n    )\r\n\r\n    let resData = await response.json();\r\n\r\n    return resData\r\n}\r\n\r\nexport default loadEmployees;","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\nimport ResultViewer from './components/ResultViewer';\nimport loadEmployees from './API/loadEmployees';\n\nconst App = () => {\n\n  const [employees, setEmployees] = useState([]);\n  const [allEmployees, setAllEmployees] = useState([]); // using just to ensure we always have the same employees rather than reloading\n\n  const matchUserByString = async (text) => {\n    let users = allEmployees.filter(item => {\n      let userFullName = `${item.name.first} ${item.name.last}`;\n      if(userFullName.substr(0, text.length).toLowerCase() === text.toLowerCase()) return item;\n      return null;\n    })\n\n    setEmployees([...users])\n  }\n\n  const sortUsersByName = (isAsc) => {\n    let employeesToSort = [...employees];\n\n    (isAsc) ? employeesToSort.sort((a, b) => {\n      var nameA = `${a.name.first} ${a.name.last}`.toLowerCase();\n      var nameB = `${b.name.first} ${b.name.last}`.toLowerCase();\n      return (nameA < nameB) ? -1 : (nameA > nameB) ? 1 : 0;\n    }) : employeesToSort.sort((a, b) => {\n      var nameA = `${a.name.first} ${a.name.last}`.toLowerCase();\n      var nameB = `${b.name.first} ${b.name.last}`.toLowerCase();\n      return (nameA > nameB) ? -1 : (nameA < nameB) ? 1 : 0;\n    });\n\n    setEmployees([...employeesToSort]);\n  }\n\n  const loadData = async () => {\n    let results = await loadEmployees();    \n    \n    setEmployees([...results.results])\n    setAllEmployees([...results.results])\n  }\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  return (\n    <div className='App-header'>\n      <Header />  \n      <ResultViewer \n        data={employees}\n        findByUser={matchUserByString}\n        sortUsers={sortUsersByName}\n      />\n    </div>\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}